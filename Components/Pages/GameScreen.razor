@page "/game"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations;

@*
    This is the GameScreen component that will be displayed when the game is in progress.
    It will display the grid of cards and a button to end the game.
    Optionally, we can add a timer, a score, and other game-related information here.
    We need to keep track of the state of each card, the number of cards, and the type of cards
    and implement the logic to check if two cards are a match. If they are a match, we can
    update the state of the cards to indicate that they are matched. If they are not a match,
    we can flip the cards back over.
*@

<PageTitle>Gameboard</PageTitle>

<div class="gamescreen">
    @foreach (var card in MemoryGame.Cards)
    {
        <Card Id="@card.Id" MatchId="@card.MatchId" OnCardClicked="HandleCardClick" OnCardInitialized="HandleCardInitialzed" />
    }
</div>
<button @onclick="EndGame">End Game</button>

@code {

    private List<Card> cards = new List<Card>();

    private async void HandleCardClick(int cardId)
    {
        // Handle the click event for the card with the specified cardId
        // You can implement your logic here
        if (MemoryGame.ResetFlippedCards)
        {
            await Task.Delay(2000); // Wait for 5 seconds
            foreach (var card in cards)
            {
                if (card.IsFlipped && !card.IsMatched)
                {
                    card.ToggleIsFlipped();
                }
            }
            MemoryGame.ResetFlippedCards = false;
        }
    }

    private void HandleCardInitialzed(Card card)
    {
        cards.Add(card);
    }

    // The size of the deck (number of cards)
    private int DeckSize { get; set; } = 16;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MemoryGame.InitializeMemoryGame(DeckSize);
    }

    private void EndGame()
    {
        NavigationManager.NavigateTo("/endgame");
    }
}